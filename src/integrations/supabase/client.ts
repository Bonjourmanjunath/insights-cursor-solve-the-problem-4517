// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lgxqviomumjiqljpnvuh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxneHF2aW9tdW1qaXFsanBudnVoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg3NjcyNDUsImV4cCI6MjA2NDM0MzI0NX0.uXOtmvQfYSpVFzbAP9kEym4Em8qtKO-y0y4J0fDEggw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Temporary workaround for the em-dash issue
const originalInvoke = supabase.functions.invoke.bind(supabase.functions);
supabase.functions.invoke = async (functionName: string, options?: any) => {
  console.log('[SUPABASE-DEBUG] === FUNCTION INVOKE INTERCEPTED ===');
  console.log('[SUPABASE-DEBUG] Original input:', functionName);
  console.log('[SUPABASE-DEBUG] Type:', typeof functionName);
  console.log('[SUPABASE-DEBUG] Length:', functionName.length);
  
  // Check each character
  for (let i = 0; i < functionName.length; i++) {
    const char = functionName[i];
    const code = char.charCodeAt(0);
    console.log(`[SUPABASE-DEBUG] Character ${i}: "${char}" = ${code} (0x${code.toString(16)})`);
  }
  
  // Force ASCII hyphens in function names - includes ALL dash types
  const safeFunctionName = functionName
    .replace(/[\u2010-\u2015]/g, '-')  // Various dashes
    .replace(/[\u2212]/g, '-')         // Minus sign
    .replace(/[\u2013-\u2014]/g, '-')  // En-dash and em-dash
    .replace(/[—–−]/g, '-')            // Direct characters
    .replace(/[\u00AD]/g, '-')         // Soft hyphen
    .replace(/[\uFE58]/g, '-')         // Small em-dash
    .replace(/[\uFE63]/g, '-')         // Small hyphen-minus
    .replace(/[\uFF0D]/g, '-');        // Fullwidth hyphen-minus
  
  console.log('[SUPABASE-DEBUG] Safe function name:', safeFunctionName);
  console.log('[SUPABASE-DEBUG] Safe name length:', safeFunctionName.length);
  console.log('[SUPABASE-DEBUG] === END DEBUG ===');
  
  return originalInvoke(safeFunctionName, options);
};