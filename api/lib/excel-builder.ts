import ExcelJS from "exceljs";

interface FMRDishResponse {
  fmr_dish: {
    title: string;
    description: string;
    questions: Array<{
      question_type: string;
      question: string;
      respondents: Record<
        string,
        {
          quote: string;
          summary: string;
          theme: string;
          source: {
            participantLabel: string;
            chunkId: string;
            windowId: string;
            timeStart?: number;
            timeEnd?: number;
          };
        }
      >;
    }>;
  };
  analysis_metadata: {
    filesProcessed: number;
    guideItemsProcessed: number;
    supportedByQuoteRate: number;
    coverageRate: number;
    latency_ms: number;
    totalTokens: number;
  };
}

export async function buildExcelWorkbook(
  data: FMRDishResponse,
): Promise<Buffer> {
  const workbook = new ExcelJS.Workbook();

  // Add metadata
  workbook.creator = "FMR Global Health";
  workbook.lastModifiedBy = "FMR Dish Analysis API";
  workbook.created = new Date();
  workbook.modified = new Date();

  // Create title sheet
  createTitleSheet(workbook, data);

  // Create main analysis sheet
  createAnalysisSheet(workbook, data);

  // Generate buffer
  return (await workbook.xlsx.writeBuffer()) as Buffer;
}

function createTitleSheet(
  workbook: ExcelJS.Workbook,
  data: FMRDishResponse,
): void {
  const sheet = workbook.addWorksheet("Project Info");

  // Set column widths
  sheet.columns = [{ width: 20 }, { width: 60 }];

  // Add title
  const titleRow = sheet.addRow(["FMR DISH ANALYSIS"]);
  titleRow.font = { bold: true, size: 16 };
  sheet.mergeCells("A1:B1");

  // Add project info
  sheet.addRow([""]);
  sheet.addRow(["Project Title", data.fmr_dish.title]);
  sheet.addRow(["Description", data.fmr_dish.description]);
  sheet.addRow(["Date Generated", new Date().toLocaleDateString()]);
  sheet.addRow([""]);

  // Add metadata table
  const metadataHeaderRow = sheet.addRow(["Analysis Metrics", "Value"]);
  metadataHeaderRow.font = { bold: true };
  metadataHeaderRow.fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "FFE0E0E0" },
  };

  sheet.addRow([
    "Files Processed",
    data.analysis_metadata.filesProcessed.toString(),
  ]);
  sheet.addRow([
    "Guide Questions",
    data.analysis_metadata.guideItemsProcessed.toString(),
  ]);
  sheet.addRow([
    "Quote Support Rate",
    `${(data.analysis_metadata.supportedByQuoteRate * 100).toFixed(1)}%`,
  ]);
  sheet.addRow([
    "Coverage Rate",
    `${(data.analysis_metadata.coverageRate * 100).toFixed(1)}%`,
  ]);
  sheet.addRow([
    "Processing Time",
    `${(data.analysis_metadata.latency_ms / 1000).toFixed(1)} seconds`,
  ]);
  sheet.addRow([
    "Total Tokens Used",
    data.analysis_metadata.totalTokens.toString(),
  ]);

  // Add border to metadata table
  for (let i = 6; i <= 12; i++) {
    for (let j = 1; j <= 2; j++) {
      const cell = sheet.getCell(i, j);
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
    }
  }

  // Add footer
  sheet.addRow([""]);
  sheet.addRow([""]);
  const footerRow = sheet.addRow([
    "Generated by FMR Transcript Intelligence Platform",
  ]);
  footerRow.font = { italic: true, color: { argb: "FF808080" } };
}

function createAnalysisSheet(
  workbook: ExcelJS.Workbook,
  data: FMRDishResponse,
): void {
  const sheet = workbook.addWorksheet("FMR Dish Analysis");

  // Get unique respondents
  const respondents = new Set<string>();
  data.fmr_dish.questions.forEach((q) => {
    Object.keys(q.respondents).forEach((r) => respondents.add(r));
  });
  const respondentsList = Array.from(respondents);

  // Calculate columns needed
  // For each respondent: Quote, Summary, Theme (3 columns)
  const totalColumns = 2 + respondentsList.length * 3;

  // Set up columns with appropriate widths
  const columns: Partial<ExcelJS.Column>[] = [
    { header: "Theme", width: 15 },
    { header: "Question", width: 30 },
  ];

  // Add respondent columns
  respondentsList.forEach((respondent) => {
    columns.push(
      { header: `${respondent} - Quote`, width: 25 },
      { header: `${respondent} - Summary`, width: 25 },
      { header: `${respondent} - Theme`, width: 15 },
    );
  });

  sheet.columns = columns;

  // Style header row
  const headerRow = sheet.getRow(1);
  headerRow.font = { bold: true, color: { argb: "FFFFFFFF" } };
  headerRow.fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "FF1E40AF" }, // FMR blue
  };
  headerRow.alignment = { vertical: "middle", horizontal: "center" };

  // Group questions by theme
  const questionsByTheme: Record<string, typeof data.fmr_dish.questions> = {};
  data.fmr_dish.questions.forEach((question) => {
    if (!questionsByTheme[question.question_type]) {
      questionsByTheme[question.question_type] = [];
    }
    questionsByTheme[question.question_type].push(question);
  });

  // Add data rows, grouped by theme
  let rowIndex = 2;
  const themeColors: Record<string, string> = {
    "Warm-up": "FFE6F0FF", // Light blue
    "Current Practices": "FFE6FFEA", // Light green
    "Supply/Budget": "FFFFF2E6", // Light orange
    Trials: "FFFEE6FF", // Light purple
    Challenges: "FFFFE6E6", // Light red
    Other: "FFF5F5F5", // Light gray
  };

  Object.entries(questionsByTheme).forEach(([theme, questions]) => {
    // Add theme header
    const themeRow = sheet.addRow([theme, ""]);
    themeRow.font = { bold: true };
    themeRow.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: themeColors[theme] || "FFF0F0F0" },
    };
    sheet.mergeCells(
      `A${rowIndex}:${String.fromCharCode(65 + totalColumns - 1)}${rowIndex}`,
    );
    rowIndex++;

    // Add questions for this theme
    questions.forEach((question) => {
      const rowData: any[] = [theme, question.question];

      // Add data for each respondent
      respondentsList.forEach((respondent) => {
        const response = question.respondents[respondent];
        if (response) {
          rowData.push(response.quote, response.summary, response.theme);
        } else {
          rowData.push("Not discussed", "No response", "N/A");
        }
      });

      const row = sheet.addRow(rowData);

      // Style row
      row.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: rowIndex % 2 === 0 ? "FFFFFFFF" : "FFF9F9F9" }, // Alternate row colors
      };

      // Set text wrapping
      row.alignment = { wrapText: true, vertical: "top" };
      row.height = 60; // Set row height to accommodate wrapped text

      rowIndex++;
    });
  });

  // Add borders to all cells
  for (let i = 1; i <= rowIndex - 1; i++) {
    for (let j = 1; j <= totalColumns; j++) {
      const cell = sheet.getCell(i, j);
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
    }
  }

  // Add footer
  const footerRow = sheet.addRow([
    "Generated by FMR Transcript Intelligence Platform",
  ]);
  footerRow.font = { italic: true, color: { argb: "FF808080" } };
  sheet.mergeCells(
    `A${rowIndex}:${String.fromCharCode(65 + totalColumns - 1)}${rowIndex}`,
  );
}
